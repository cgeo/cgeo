import com.getkeepsafe.dexcount.OutputFormat
import org.apache.tools.ant.filters.ReplaceTokens

import javax.inject.Inject

/*
 * Run "gradlew" or "gradlew cgeoHelp" in the parent directory for a help of how to use this build file.
 */


/*
 * Android plugin, http://developer.android.com/tools/building/plugin-for-gradle.html
 */
apply plugin: 'com.android.application'

android {
    namespace 'cgeo.geocaching'
    compileSdk 34


    compileOptions {
        // https://developer.android.com/studio/write/java8-support
        // enable Java 8 APIs like Streams on older Android versions
        coreLibraryDesugaringEnabled true
        // use the diamond operator, lambdas and some other Java 8 language features in Android
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdk 21
        //noinspection OldTargetApi
        targetSdk 34
        versionName versionNameFromDate()
        versionCode versionCodeFromDate(0)

        // NOTE: must match the package in the test directory and must be different from the app package
        testApplicationId "cgeo.geocaching.test"

        //testHandlingProfiling true
        testFunctionalTest true

        // set the default test runner to be used by IDE and command line
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // by convention, the folder name "main" is used for the APK file name. we want cgeo instead
        archivesBaseName = "cgeo"

        // this is necessary to move .google_measurement_service into a app-specific namespace (see https://github.com/kotmyrevich/analytics-issues/issues/784)
        applicationId = "cgeo.geocaching"

        // include only those language resources from libraries which we actively maintain ourselves in the translation project at https://crowdin.com/project/cgeo
        // not yet enough translations (~50%): "is","iw"(="he"),"lb"
        ArrayList<String> locales = [ 'en', 'ar', 'ca', 'ceb', 'cs', 'da', 'de', 'el', 'es', 'fi', 'fil', 'fr', 'hu', 'in', 'it', 'ja', 'ko', 'lt', 'lv', 'nb', 'nl', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'tl', 'tr', 'uk', 'zh', 'zh-rTW' ]

        // needed for in-app language selector
        buildConfigField "String[]", "TRANSLATION_ARRAY", "new String[]{\""+locales.join("\",\"")+"\"}"

        resourceConfigurations += locales
    }

    // signing is handled via private.properties
    signingConfigs {
        release
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            // debug build name contains git commit for better reproduction of bugs
            versionNameSuffix "-" + GitCommit.currentShort() + " developer build"

            applicationIdSuffix ".developer"

            // additional proguard rules just for the test code
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt', '../tests/proguard-project.txt'

            // code coverage
            testCoverageEnabled isContinuousIntegrationServer()

            // replace in AndroidManifest.xml
            manifestPlaceholders = [
                appIcon:      "@mipmap/ic_launcher_debug",
                appIconRound: "@mipmap/ic_launcher_debug_round"
            ]
        }
        nightly {
            String nightlyName = System.getenv('NB') // NB, NB1, ...
            versionNameSuffix "-$nightlyName-" + GitCommit.currentShort()
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
            manifestPlaceholders = [
                appIcon:      "@mipmap/ic_launcher_nightly",
                appIconRound: "@mipmap/ic_launcher_nightly_round"
            ]
        }
        rc {
            String rcName = System.getenv('RC') // RC, RC1, RC2 ...
            versionNameSuffix "-$rcName"
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
            manifestPlaceholders = [
                appIcon:      "@mipmap/ic_launcher_rc",
                appIconRound: "@mipmap/ic_launcher_rc_round"
            ]
        }
        legacy {
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
            manifestPlaceholders = [
                appIcon:      "@mipmap/ic_launcher",
                appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
        release {
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                appIcon:      "@mipmap/ic_launcher",
                appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
    }

    buildTypes.configureEach { buildType ->
        // as it affects the build speed, do skip some steps for debug builds
        if (buildType.name != 'debug') {
            // enable proguard and remove unused code
            minifyEnabled true

            // remove unused resources in addition to unused code
            shrinkResources true
        }

        // proguard rules
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
    }

    testBuildType "debug" //the default BuildType

    sourceSets {
        // application sources in source set "main"
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'thirdparty'] // no need for annotation generated sources
            res.srcDirs = ['src/main/res', 'src/main/res.maplegends/elevate', 'src/main/res.maplegends/fzk', 'src/main/res.maplegends/fzk-outdoor']
            assets.srcDirs = ['src/main/assets']
            aidl.srcDirs = ['src/main/java'] // default src/main/aidl creates package name conflicts in Eclipse
        }
        // local unit tests, which can be executed without a device
        test {
            setRoot("src/test/java")
            manifest.srcFile 'src/test/AndroidManifest.xml'
            java.srcDir 'src/test/java'
            resources.srcDirs = ['src/test/res']
            res.srcDirs = ['src/test/res']
        }
        // device/emulator based instrumentation tests in source set "androidTest"
        androidTest{
            setRoot("src/androidTest")
            manifest.srcFile 'src/androidTest/AndroidManifest.xml'
            java.srcDir 'src/androidTest/java'
            resources.srcDirs = ['src/androidTest/res']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    testOptions {
        resultsDir = "$project.buildDir/build/test-results"
    }

    lint {
        // we do not accept lint errors when building
        abortOnError true
        // Warnings shall not fail build
        warningsAsErrors false

        // abort release builds in case of FATAL errors
        checkReleaseBuilds true

        absolutePaths false

        // ExtraTranslation - old translation will be deleted by the next crowdin import
        disable 'ExtraTranslation'
        // we will take what is given by crowdin - For locale "fr": "many" is missing currently
        disable 'MissingQuantity'

        // necessary as we changing locales at runtime (CgeoApplication.initApplicationLocale())
        disable 'AppBundleLocaleChanges'

        // analyze all dependency modules in parallel and produce a single report
        // including issues from the app and all of its dependencies
        checkDependencies true
    }

    packagingOptions {
        resources {
            excludes += [
                    // you can double click an APK file in Android Studio 2.2+ to see what's in there
                    // license files of libs are not needed in our APK
                    'META-INF/DEPENDENCIES',
                    'META-INF/dependencies',
                    'META-INF/NOTICE',
                    'META-INF/notice',
                    'META-INF/LICENSE',
                    'META-INF/license',
                    'META-INF/LICENSE.txt',
                    'META-INF/license.txt',
                    'META-INF/NOTICE.txt',
                    'META-INF/notice.txt',
                    'COPYING',
                    'COPYING.LESSER',
                    '.readme',
                    // AndroidAnnotations
                    'androidannotations-api.properties',
                    // mapsforge
                    'META-INF/maven/org.mapsforge/mapsforge-map-reader/pom.properties',
                    'META-INF/maven/org.mapsforge/mapsforge-map-reader/pom.xml',
                    'META-INF/maven/org.mapsforge/mapsforge-map/pom.properties',
                    'META-INF/maven/org.mapsforge/mapsforge-map/pom.xml',
                    'COPYING.LESSER.v3',
                    'COPYING.v3',
                    // Play Services
                    'build-data.properties',
                    // rxjava
                    'META-INF/rxandroid.properties',
                    'META-INF/rxjava.properties'
            ]

            // vtm-themes
            pickFirsts.add("assets/symbols/**")
            pickFirsts.add("assets/patterns/**")
        }
    }

    flavorDimensions.add("javaCompilerTime") // all flavours must be assigned a dimension
    productFlavors {
        // make sure to not have any flavour lexicographically smaller than "basic". Android Studio takes the first alphabetical flavor in new installations.
        basic {
            dimension "javaCompilerTime"
            buildConfigField "String", "SPECIAL_BUILD", '""'
        }

        nojit {
            dimension "javaCompilerTime"
            buildConfigField "String", "SPECIAL_BUILD", '"Disabled JIT"'
        }
    }

    // remove the "-basic" flavour name from the generated APK, have the flavor remain only for special builds
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            outputFileName = outputFileName.replace('-basic-', '-')
        }
    }

    // special version code for nightly and rc builds
    applicationVariants.configureEach { variant ->
        if (variant.buildType.name == 'nightly') {
            variant.outputs.configureEach {
                setVersionCodeOverride(versionCodeFromDate(10000000))
            }
        }
        if (variant.buildType.name == 'rc') {
            variant.outputs.configureEach {
                setVersionCodeOverride(versionCodeFromDate(-1))
            }
        }
        if (variant.buildType.name == 'legacy') {
            String legacyName = System.getenv('LEGACY_VERSION_NAME')
            Integer legacyVersion = System.getenv('LEGACY_VERSION_CODE') as Integer
            if (legacyName != null && legacyVersion != null) {
                variant.outputs.configureEach {
                    setVersionNameOverride(legacyName)
                    setVersionCodeOverride(legacyVersion)
                }
            }
        }
        // debug and release builds have offset zero, no special handling here
    }

    // tests rely on JUnit-based classes
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
}

dependencies {
    // desugaring of Java 8 APIs
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // Apache Commons
    implementation 'org.apache.commons:commons-collections4:4.4'

    // commons.compress 1.21+ relies on java.nio which is only supported on API26+
    // See https://github.com/cgeo/cgeo/issues/13730 / 13731
    //noinspection GradleDependency
    implementation 'org.apache.commons:commons-compress:1.20'

    // commons-lang3 3.12.0 uses StringJoiner which is first contained in Android API24
    // See https://github.com/cgeo/cgeo/issues/12577
    //noinspection GradleDependency
    implementation 'org.apache.commons:commons-lang3:3.11'

    // commons-text 1.10.0 uses commons-lang3 3.12.0 and commons-io 2.11.0, wait for updating both
    //noinspection GradleDependency
    implementation 'org.apache.commons:commons-text:1.9'

    // commons-io 2.6 uses java.nio.file.Path - which is first contained in Android API26
    // could be replaced by Storage Access Framework
    //noinspection GradleDependency
    implementation 'commons-io:commons-io:2.5'

    // License: Apache-2.0. https://github.com/k3b/k3b-geoHelper/
    // decode geo-uris and web-map-service-urls
    implementation('com.github.k3b:k3b-geoHelper:v1.1.12') {
        // do not get transitive 'commons-io:commons-io:2.6' as c:geo uses 2.5 to be compatible with older android versions
        exclude group: 'commons-io', module: 'commons-io'
    }

    // AssertJ for testing, needed both for local unit tests and Android instrumentation tests
    String assertJVersion = '2.9.1'
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    androidTestImplementation "org.assertj:assertj-core:$assertJVersion"

    // SpotBugs (successor of FindBugs)
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.8.4'

    // GeographicLib
    implementation 'net.sf.geographiclib:GeographicLib-Java:2.0'

    // DB inspection
    implementation 'com.github.moving-bits:datatables:v0.1.0'
    implementation 'com.github.moving-bits:dbinspection:v0.1.0'

    // Jackson XML processing
    // Jackson 2.14++ needs minSdk 26
    //noinspection GradleDependency
    String jacksonVersion = '2.13.5'
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

    // Jsoup HTML parsing
    implementation 'org.jsoup:jsoup:1.18.1'

     // GeoJson parsing: https://github.com/cocoahero/android-geojson
    implementation 'com.cocoahero.android:geojson:1.0.1@jar'

    // Junit only needed for local unit tests
    testImplementation 'junit:junit:4.13.2'

    // Leak Canary, memory leak detection
    String leakCanaryVersion = '2.14'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    implementation "com.squareup.leakcanary:plumber-android:$leakCanaryVersion"

    // Locus Maps integration
    implementation "com.asamm:locus-api-android:0.9.55"

    // -- Mapsforge / Mapsforge --

    // Mapsforge official version
    // String mapsforgeSource = 'org.mapsforge'
    // String mapsforgeVersion = '0.21.0'

    // Mapsforge Snapshot from official master branch (via https://jitpack.io/#mapsforge/mapsforge)
    String mapsforgeSource = 'com.github.mapsforge.mapsforge'
    String mapsforgeVersion = 'f3350ef261' // master as of 2024-09-18, including rotation & fractional zoom

    // Mapsforge Snapshot from cgeo's GitHub repository (via https://jitpack.io/#cgeo/mapsforge)
    // String mapsforgeSource = 'com.github.cgeo.mapsforge'
    // String mapsforgeVersion = 'fbc75a4' // fix for #12210

    implementation "$mapsforgeSource:mapsforge-core:$mapsforgeVersion"
    implementation "$mapsforgeSource:mapsforge-map:$mapsforgeVersion"
    implementation "$mapsforgeSource:mapsforge-map-android:$mapsforgeVersion"
    implementation "$mapsforgeSource:mapsforge-map-reader:$mapsforgeVersion"
    implementation "$mapsforgeSource:mapsforge-themes:$mapsforgeVersion"

    // -- Mapsforge / VTM --

    // Mapsforge VTM implementation (official version)
    String mapsforgeVTMSource = 'org.mapsforge'
    String mapsforgeVTMVersion = '0.21.0'

    // Mapsforge VTM Snapshot from official master branch (via https://jitpack.io/#mapsforge/vtm)
    // String mapsforgeVTMSource = 'com.github.mapsforge.vtm'
    // String mapsforgeVTMVersion = 'b3ff48fcc6' // LineBucket: transparent lines (9d68bdb) + dropDistance (31646b3) + line transparent style option (b3ff48fcc6)

    // Mapsforge VTM Snapshots (created by project itself)
    // See https://github.com/mapsforge/vtm/blob/master/docs/Integration.md#snapshots
    // For available snapshots see https://oss.sonatype.org/content/repositories/snapshots/org/mapsforge/
    //String mapsforgeVTMSource = 'org.mapsforge'
    //String mapsforgeVTMVersion = 'master-SNAPSHOT'  // the really latest SNAPSHOT of master. Do not use for official builds!
    //String mapsforgeVTMVersion = 'master-20231222.081736-913'

    implementation "$mapsforgeVTMSource:vtm:$mapsforgeVTMVersion"
    implementation "$mapsforgeVTMSource:vtm-themes:$mapsforgeVTMVersion"
    implementation "$mapsforgeVTMSource:vtm-jts:$mapsforgeVTMVersion"
    implementation "org.locationtech.jts:jts-core:1.16.1"

    runtimeOnly "$mapsforgeVTMSource:vtm-android:$mapsforgeVTMVersion:natives-armeabi-v7a"
    runtimeOnly "$mapsforgeVTMSource:vtm-android:$mapsforgeVTMVersion:natives-arm64-v8a"
    runtimeOnly "$mapsforgeVTMSource:vtm-android:$mapsforgeVTMVersion:natives-x86"
    runtimeOnly "$mapsforgeVTMSource:vtm-android:$mapsforgeVTMVersion:natives-x86_64"
    implementation "$mapsforgeVTMSource:vtm-android:$mapsforgeVTMVersion"

    implementation "$mapsforgeVTMSource:vtm-http:$mapsforgeVTMVersion"

    configurations {
        all*.exclude group: 'net.sf.kxml', module: 'kxml2' // duplicate XmlPullParser class
    }

    // used by mapsforge
    implementation 'com.caverock:androidsvg:1.4'

    // Maps.ME integration
    implementation project(":mapswithme-api")

    // Organic Maps integration
    implementation project(":organicmaps-api")

    // Metadata Extractor, EXIF location extraction from images
    implementation 'com.drewnoakes:metadata-extractor:2.19.0'

    String okhttpVersion = '4.11.0'
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    // For local unit tests
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // Play Services
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation 'com.google.android.gms:play-services-maps:19.0.0'
    // somehow there is a transitive play service dependency which we don't want
    configurations.all*.exclude module: "play-services-measurement"

    // Support Library Design
    implementation 'com.google.android.material:material:1.9.0'

    // ProcessPhoenix, reliable process restart
    // implementation 'com.jakewharton:process-phoenix:2.0.0'

    // RxJava
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    implementation "io.reactivex.rxjava3:rxandroid:3.0.2"

    // avoid duplicate class, see e.g. https://stackoverflow.com/questions/75712899/duplicate-class-kotlin-random-jdk8-found-in-modules-jetified-kotlin-stdlib-1-8-1
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10") {
            because 'align all versions of kotlin transitive dependencies'
        }
    }

    // Support Library Lifecycle Helpers
    String lifecycleVersion = '2.6.2'
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycleVersion"

    // workmanager (to replace foreground services for downloader)
    implementation "androidx.work:work-runtime:2.8.1"

    // Support Library AppCompat
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Support Library core (used for eg. HtmlCompat)
    implementation 'androidx.core:core:1.8.0'

    // Support Library constraintlayout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Support Library ExifInterface
    implementation 'androidx.exifinterface:exifinterface:1.3.7'

    // Support Library GridLayout used by the coordinate calculator
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    // Support Library RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    // Settings Library
    implementation 'androidx.preference:preference:1.2.1'

    // Support Annotations. use same version for the main app and the test app
    String annotationVersion = '1.8.1'
    implementation "androidx.annotation:annotation:$annotationVersion"
    androidTestImplementation "androidx.annotation:annotation:$annotationVersion"

    // Testing Support Libraries
    androidTestImplementation 'androidx.test:core:1.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    // needed for chrome custom tabs
    implementation 'androidx.browser:browser:1.5.0'

    // MarkDown view
    implementation 'io.noties.markwon:core:4.6.2'

    // Loupe for ImageGallery and zoomable ImageViews
    implementation 'io.github.igreenwood.loupe:loupe:1.2.2'
    //implementation 'io.github.igreenwood.loupe:extensions:1.0.1' //as of now not needed

    //TooLargeTool is used for logging transaction sizes and thus helping find transactionTooLargeExceptions
    //See https://github.com/guardian/toolargetool
    implementation 'com.gu.android:toolargetool:0.3.0'

    // charting, based on com.github.PhilJay:MPAndroidChart
    // for detailed docs for the base library see https://weeklycoding.com/mpandroidchart/
    // stay with 3.1.0.16 for now to avoid problems with CI
    implementation 'com.github.AppDevNext:AndroidChart:3.1.0.16'

    // For Wherigos: openwig@cgeo
    implementation 'com.github.cgeo:openwig:1.0.0'

    // For Wherigos: GIF support
    // ani gif support
    // minSdk=17 from version 1.2.16
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.28'
}

// define objects for files/folders outside tasks
File privatePropertiesFile = rootProject.file('private.properties')
String templatesDirectory = "templates"
String keysDirectory = "src/main/res/values"
String keysName = "keys.xml"
File templatesFile = project.file(templatesDirectory + "/" + keysName)
File keysFile = project.file(keysDirectory + "/" + keysName)
File preferencesFile = project.file('cgeo.geocaching_preferences.xml')
String adb = android.getAdbExecutable().absolutePath
String debugBuildAppId = 'cgeo.geocaching.developer'

// verify existence of the necessary keys for compilation, instead of waiting for a compile error
project.afterEvaluate {
    preBuild.dependsOn("verifyCgeoKeys")
}

tasks.register('verifyCgeoKeys') {
    group = 'verification'
    description = 'Checks for the existence of keys.xml to successfully compile cgeo.'
    doFirst {
        if (!keysFile.exists()) {
            // copy keys from private.properties to keys.xml. used by the CI server at least
            if (privatePropertiesFile.exists()) {
                copy {
                    from templatesFile
                    into keysDirectory
                    Properties properties = new Properties()
                    privatePropertiesFile.withInputStream {
                        properties.load(it)
                    }
                    filter(ReplaceTokens, tokens: properties)
                    filter { it.replaceAll("@.+?@", "") }
                }
            }
        }
        if (!keysFile.exists()) {
            throw new InvalidUserDataException("You must provide API keys for c:geo to compile successfully. Please read the 'API keys' section in the README.md file for further details.")
        }
    }
}

// version number from the current date, plus an offset defined by the build type (to define which versions overwrite each other)
static int versionCodeFromDate(offset) {
    Date date = new Date()
    String formattedDate = date.format('yyyyMMdd')
    return Integer.valueOf(formattedDate) + offset
}

// version name based on current date
static String versionNameFromDate() {
    Date date = new Date()
    String formattedDate = date.format('yyyy.MM.dd')
    return formattedDate
}

// get the most recent git commit ID in long and short form
class GitCommit {
    static String commitId

    static String current() {
        if (commitId == null) {
            Process p = ['git', 'rev-parse', 'HEAD'].execute()
            if (p.waitFor() != 0) {
                throw new Error("Unable to get git commit id: " + p.err.text)
            }
            commitId = p.text.trim()
        }
        return commitId
    }

    static String currentShort() {
        return current().substring(0, 7)
    }
}

// check whether this is a local build or a CI server build
static boolean isContinuousIntegrationServer() {
    return System.getenv('BUILD_NUMBER') != null
}

// have a run task for our builds to launch the app directly from gradle
android.applicationVariants.configureEach { variant ->
    if (variant.installProvider) {
        tasks.register("run${variant.name.capitalize()}") {
            group 'cgeo'
            description "Installs the ${variant.description} and runs the main activity. Depends on 'adb' being on the PATH."
            dependsOn tasks.named(variant.installProvider.name)

            doFirst {
                String classpath = variant.applicationId
                if (variant.buildType.applicationIdSuffix) {
                    classpath -= "${variant.buildType.applicationIdSuffix}"
                }
                GString launchClass = "${variant.applicationId}/${classpath}.MainActivity"
                try {
                    project.exec {
                        executable = adb
                        args = ['shell', 'am', 'start', '-n', launchClass]
                    }
                }
                catch (RuntimeException e) {
                    throw new IllegalStateException("Cannot execute 'adb'. Please add %ANDROID_HOME%\\platform-tools to the PATH environment variable and restart your IDE", e)
                }
            }
        }
    }
}

// run device and non device tests together with one task. also fixes the bug that gradle optimizes tests away in repeated runs
// This uses eager task creation API.
tasks.register('testDebug') {
    group 'verification'
    description "Tests the debug build both with device-dependent and device-independent tests."

    dependsOn 'testBasicDebugUnitTest', 'connectedBasicDebugAndroidTest'
}

/*
 * signing of release APK, use a properties file like in templates/private.properties
 */
// dynamically load the signing values from private.properties
if (privatePropertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(privatePropertiesFile))
    android.signingConfigs {
        release {
            storeFile file(properties.getProperty('key.store'))
            storePassword properties.getProperty('key.store.password')
            keyAlias properties.getProperty('key.alias')
            keyPassword properties.getProperty('key.alias.password')
        }
    }
    android.buildTypes.release.signingConfig android.signingConfigs.release
}

// check existence of private properties, show an error message
tasks.register('verifyPrivateProperties') {
    doLast {
        if (!privatePropertiesFile.exists()) {
            throw new InvalidUserDataException("For signing the release build you must provide a file private.properties in the root directory. Copy templates/private.properties and change the values.")
        }
    }
}

interface Injected {
    @Inject ExecOperations getExecOperations()
}

// copy preferences containing user and password to the device
tasks.register('copyDefaultPreferencesToAndroid') {
    dependsOn 'installBasicDebug'
    Injected injected = project.objects.newInstance(Injected)
    doFirst {
        if (preferencesFile.exists()) {
            try {
                injected.execOperations.exec {
                    executable = adb
                    args = ['push', 'cgeo.geocaching_preferences.xml', '/data/local/tmp/cgeo.geocaching_preferences.xml']
                }
                injected.execOperations.exec {
                    executable = adb
                    args = ['shell', 'run-as', debugBuildAppId, 'mkdir', '-p', '/data/data/'+debugBuildAppId+'/shared_prefs/']
                }
                injected.execOperations.exec {
                    executable = adb
                    args = ['shell', 'run-as', debugBuildAppId, 'cp', '/data/local/tmp/cgeo.geocaching_preferences.xml', '/data/data/'+debugBuildAppId+'/shared_prefs/'+debugBuildAppId+'_preferences.xml']
                }
                injected.execOperations.exec {
                    executable = adb
                    args = ['shell', 'run-as', debugBuildAppId, 'ls', '-l', '/data/data/'+debugBuildAppId+'/shared_prefs/']
                }
                injected.execOperations.exec {
                    executable = adb
                    args = ['shell', 'getprop', 'ro.build.version.release']
                }
            }
            // we might not actually have permission to copy the preferences on actual devices, let's continue running the app then
            catch (RuntimeException e) {
                print(e.message)
            }
        }
    }
}

tasks.configureEach { theTask ->
    // only verify the existence of private.properties, when the file is really needed
    if (theTask.name == "packageRelease") {
        theTask.dependsOn "verifyPrivateProperties"
    }
    // copy default preferences before starting the app
    if (theTask.name == "runBasicDebug" || theTask.name == "connectedBasicDebugAndroidTest") {
        theTask.dependsOn "copyDefaultPreferencesToAndroid"
    }
}

/*
 * dex counting - start it manually, when necessary
 * https://github.com/KeepSafe/dexcount-gradle-plugin
 */
apply plugin: 'com.getkeepsafe.dexcount'

dexcount {
    format = OutputFormat.LIST
    includeClassCount = true
    includeTotalMethodCount = true
}

// un-mocking of Android classes that don't depend on the Android device, but are portable Java only, like SparseArray
apply plugin: 'de.mobilej.unmock'

/*
 * own checkstyle configuration
 * Android plugin doesn't interoperate with the Checkstyle plugin
 */
apply plugin: 'checkstyle'

checkstyle {
    // assign the checkstyle version explicitly here
    // and in AndroidStudio Settings (.idea/checkstyle-idea.xml)
    // and align it with codacy (https://github.com/codacy/codacy-checkstyle)
    toolVersion = '10.13.0'

    configDirectory = rootProject.projectDir
    configFile = rootProject.file("checkstyle.xml")
}

tasks.register('checkstyle', Checkstyle) {
    group 'verification'
    description 'Check code standard'

    source 'src/main/java'
    source 'src/test/java'
    source 'src/androidTest/java'
    include '**/*.java'

    classpath = files()

    // see https://docs.gradle.org/7.5.1/userguide/upgrading_version_7.html#declare_unreadable_input_output
    doNotTrackState("unreadable input property 'configDirectory'")
}

tasks.named('check') {
    mustRunAfter tasks.named('checkstyle')
}

apply plugin: 'pmd'

// align the toolVersion with codacy (https://github.com/codacy/codacy-pmd/blob/master/build.sbt#L9C23-L9C23)
pmd {
    consoleOutput = true
    toolVersion = "6.55.0"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/codestyle.xml", "category/java/design.xml"]
}

tasks.register('pmd', Pmd) {
    group 'verification'
    description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
    ruleSetFiles = rootProject.files("ruleset.xml")
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**','**/brouter/**'

    reports {
        xml.required.set true
        html.required.set true
    }
}
