/*
 * cgeo contacts addon
 */

apply plugin: 'com.android.application'

android {
    namespace 'cgeo.contacts'
    compileSdk 33


    // signing is handled via private.properties
    signingConfigs {
        release
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdk 21
        //noinspection OldTargetApi
        targetSdk 31

        // include only those language resources from libraries which we actively maintain ourselves in the translation project
        // not yet enough translations (~50%): "is","iw" (="he"),"zh"
        resourceConfigurations += [ 'en', 'ar', 'ca', 'ceb', 'cs', 'da', 'de', 'el', 'es', 'fi', 'fil', 'fr', 'hu', 'in', 'it', 'ja', 'ko', 'lt', 'lv', 'nb', 'nl', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'tl', 'tr', 'zh-rTW' ]
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    lint {
        // generally we accept lint errors when building
        abortOnError false

        // abort release builds in case of FATAL errors
        checkReleaseBuilds true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}


dependencies {
    // Apache Commons
    // commons-lang3 3.12.0 uses StringJoiner which is first contained in API24. See https://github.com/cgeo/cgeo/issues/12577
    //noinspection GradleDependency
    implementation 'org.apache.commons:commons-lang3:3.11'
    // commons-io 2.6 uses java.nio.file.Path - which is first contained in Android API26
    // could be replaced by Storage Access Framework
    //noinspection GradleDependency
    implementation 'commons-io:commons-io:2.5'

    // Support Library AppCompat
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Android annotations
    implementation 'androidx.annotation:annotation:1.7.0'
}

/*
 * signing of release APK, use a properties file like in templates/private.properties
 */

// dynamically load the signing values from private.properties
File privatePropertiesFile = rootProject.file('private.properties')
if (privatePropertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(privatePropertiesFile))
    android.signingConfigs {
        release {
            storeFile file(properties.getProperty('key.store'))
            storePassword properties.getProperty('key.store.password')
            keyAlias properties.getProperty('key.alias')
            keyPassword properties.getProperty('key.alias.password')
        }
    }
    android.buildTypes.release.signingConfig android.signingConfigs.release
}
